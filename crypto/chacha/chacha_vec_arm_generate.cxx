/*
 * Copyright (c) 2016, Kurt Cancemi (kurt@x64architecture.com)
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

/*
 * Instructions
 * ============
 *
 * NOTE: make sure arm-linux-gnueabihf-gcc is in your PATH.
 * cd crypto/chacha
 * Compile with: c++ chacha_vec_arm_generate.cxx -o chacha_vec_arm_generate
 * And run with: ./chacha_vec_arm_generate
 */

#include <cstdlib>
#include <fstream>
#include <iostream>

const std::string licenseheader =
    "#\n"
    "# Copyright (c) 2016, Kurt Cancemi (kurt@x64architecture.com)\n"
    "#\n"
    "# Permission to use, copy, modify, and/or distribute this software for any\n"
    "# purpose with or without fee is hereby granted, provided that the above\n"
    "# copyright notice and this permission notice appear in all copies.\n"
    "#\n"
    "# THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n"
    "# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n"
    "# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n"
    "# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n"
    "# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n"
    "# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n"
    "# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n"
    "#\n";

const std::string header =
    "# This file contains a pre-compiled version of chacha_vec.c for ARM. This is\n"
    "# needed to support using NEON at runtime without it being a prerequsite.\n"
    "#\n"
    "# This file was generated by chacha_vec_arm_generate using the following\n"
    "# compiler command:\n"
    "#     ";

const std::string compiler =
    "arm-linux-gnueabihf-gcc "
    "-DARM_ASM "
    "-O3 "
    "-mfpu=neon "
    "-fpic "
    "-I\"../../include\" "
    "-S chacha_vec.c "
    "-o chacha_vec.s";

const std::string attr28 =
    "#if defined(__ARM_PCS_VFP)\n"
    "	.eabi_attribute 28, 1\n"
    "#else\n"
    "	.eabi_attribute 28, 0\n"
    "#endif";

int main(void)
{
    std::system(compiler.c_str());

    std::ifstream in("chacha_vec.s");
    std::ofstream out("chacha_vec_arm.S");

    if (!in || !out) {
        std::cerr << "Could not open files" << std::endl;
        return 1;
    }

    out << licenseheader << std::endl;
    out << header << compiler << "\n" << std::endl;

    out << "#if !defined(OPENSSL_NO_ASM)" << "\n" << std::endl;

    std::string line;
    size_t pos;
    while (getline(in, line)) {
        pos = line.find(".eabi_attribute 28,");
        if (pos != std::string::npos)
            line = attr28;
        out << line << std::endl;
    }

	out << "#endif  /* !OPENSSL_NO_ASM */" << std::endl;

    in.close();
    out.close();
    remove("chacha_vec.s");

    return 0;
}
